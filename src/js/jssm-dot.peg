
Document
  = Whitespace e:TermList Whitespace { return e; }



GvizShape
  = "square"
  / "rectangle"
  / "circle"



ForwardLightArrow "forward light arrow ->"
  = "->"

TwoWayLightArrow "two way light arrow <->"
  = "<->"

BackLightArrow "back light arrow <-"
  = "<-"


ForwardFatArrow "forward fat arrow =>"
  = "=>"

TwoWayFatArrow "two way fat arrow <=>"
  = "<=>"

BackFatArrow "back fat arrow <="
  = "<="


ForwardTildeArrow "forward tilde arrow ~>"
  = "~>"

TwoWayTildeArrow "two way tilde arrow <~>"
  = "<~>"

BackTildeArrow "back tilde arrow <~"
  = "<~"


LightFatArrow "light fat arrow <-=>"
  = "<-=>"

LightTildeArrow "light tilde arrow <-~>"
  = "<-~>"

FatLightArrow "fat light arrow <=->"
  = "<=->"

FatTildeArrow "fat tilde arrow <=~>"
  = "<=~>"

TildeLightArrow "tilde light arrow <~->"
  = "<~->"

TildeFatArrow "tilde fat arrow <~=>"
  = "<~=>"


LightArrow "light arrow"
  = ForwardLightArrow / TwoWayLightArrow / BackLightArrow

FatArrow "fat arrow"
  = ForwardFatArrow / TwoWayFatArrow / BackFatArrow

TildeArrow "tilde arrow"
  = ForwardTildeArrow / TwoWayTildeArrow / BackTildeArrow

MixedArrow "mixed arrow"
  = LightFatArrow / LightTildeArrow / FatLightArrow / FatTildeArrow / TildeLightArrow / TildeFatArrow


Arrow "arrow"
  = MixedArrow / LightArrow / FatArrow / TildeArrow



HexDigit
  = [0-9a-fA-F]

Char
  = Unescaped
  / Escape Sequence:(
        '"'
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "v" { return "\v"; }
      / "u" digits:$(HexDigit HexDigit HexDigit HexDigit) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return Sequence; }

Escape    = "\\"
QuoteMark = '"'
Unescaped = [\x20-\x21\x23-\x5B\x5D-\u10FFFF]  // explicitly omits "

ActionLabelChar
  = ActionLabelUnescaped
  / Escape Sequence:(
        "'"
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "v" { return "\v"; }
      / "u" digits:$(HexDigit HexDigit HexDigit HexDigit) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return Sequence; }

ActionLabelQuoteMark = "'"
ActionLabelUnescaped = [\x20-\x26\x28-\x5B\x5D-\u10FFFF]  // explicitly omits ' which is hex 27

ActionLabel "action label"
  = ActionLabelQuoteMark chars:ActionLabelChar* ActionLabelQuoteMark { return chars.join(""); }

Whitespace "whitespace"
  = [ \t\n\r\v]*

String "string"
  = QuoteMark chars:Char* QuoteMark { return chars.join(""); }

Atom "atom"
  = text:[0-9a-zA-Z\.\+\_\&\(\)\%\$\#\@\!\?\,\']+ { return text.join(''); }

Label "label"
  = atom:Atom
  / string:String



Color "color"   // hoboy
  = 'red'
  / 'green'
  / 'blue'      // todo



ArrowItemKey
  = "arc_label"
  / "head_label"
  / "tail_label"

ArrowItem
  = Whitespace key:ArrowItemKey Whitespace ":" Whitespace value:Label Whitespace ";" Whitespace { return {key:key, value:value}; }

SingleEdgeColor "single edge color"
  = Whitespace "edge_color" Whitespace ":" Whitespace value:Color Whitespace ";" Whitespace { return {key:'single_edge_color', value:value}; }

ArrowItems
  = SingleEdgeColor
  / ArrowItem+

ArrowDesc
  = "{" Whitespace items:ArrowItems? Whitespace "}" { return items; }



LabelList
  = "[" Whitespace names:(Label Whitespace)* "]" { return names.map(i => i[0]); }

LabelOrLabelList
  = LabelList
  / Label



Subexp
  = Whitespace r_action : ActionLabel?
    Whitespace l_desc   : ArrowDesc?
    Whitespace arrow    : Arrow
    Whitespace r_desc   : ArrowDesc?
    Whitespace l_action : ActionLabel?
    Whitespace label    : LabelOrLabelList
    Whitespace tail     : Subexp? {

      const base = {kind: arrow, to: label};

      if (tail && (tail !== [])) { base.se       = tail;     }
      if (l_desc)                { base.l_desc   = l_desc;   }
      if (r_desc)                { base.r_desc   = r_desc;   }
      if (l_action)              { base.l_action = l_action; }
      if (r_action)              { base.r_action = r_action; }

      return base;

    }



Exp
  = label:LabelOrLabelList se:Subexp Whitespace ';' Whitespace {
    const base = { key: 'transition', from: label };
    if (se && (se !== [])) { base.se = se; }
    return base;
  }



ValidationKey
  = "whargarbl"
  / "todo"

ValidationItem
  = validationkey:ValidationKey ":" value:Label ";" { return {key:validationkey, value:value}; }

ValidationItems
  = ValidationItem+

ConfigValidation
  = Whitespace "validation" Whitespace ":" Whitespace "{" Whitespace validation_items:ValidationItems? Whitespace "};" Whitespace {
    return { config_kind: "validation", config_items: validation_items || [] };
  }



GvizLayout
  = "dot"
  / "circo"
  / "fdp"
  / "neato"

StateItemShapeKey
  = "in_shape"
  / "out_shape"
  / "node_shape"

StateItemShape
  = Whitespace key:StateItemShapeKey Whitespace ":" Whitespace value:GvizShape Whitespace ";" Whitespace { return {key:key, value:value}; }

StateItem
  = StateItemShape

StateItems
  = StateItem+

ConfigState
  = Whitespace "state" Whitespace ":" Whitespace "{" Whitespace state_items:StateItems? Whitespace "};" Whitespace {
    return { config_kind: "state", config_items: state_items || [] };
  }



ActionKey
  = "whargarbl"
  / "todo"

ActionItem
  = actionkey:ActionKey ":" value:Label ";" { return {key:actionkey, value:value}; }

ActionItems
  = ActionItem+

ConfigAction
  = Whitespace "action" Whitespace ":" Whitespace "{" Whitespace action_items:ActionItems? Whitespace "};" Whitespace {
    return { config_kind: "action", config_items: action_items || [] };
  }



TransitionKey
  = "whargarbl"
  / "todo"

TransitionItem
  = transitionkey:TransitionKey ":" value:Label ";" { return {key:transitionkey, value:value}; }

TransitionItems
  = GraphDefaultEdgeColor
  / TransitionItem+

GraphDefaultEdgeColor "graph default edge color"
  = Whitespace "edge_color" Whitespace ":" Whitespace value:Color Whitespace ";" Whitespace { return {key:'graph_default_edge_color', value:value}; }

ConfigTransition
  = Whitespace "transition" Whitespace ":" Whitespace "{" Whitespace transition_items:TransitionItems? Whitespace "};" Whitespace {
    return { config_kind: "transition", config_items: transition_items || [] };
  }



GraphBg
  = Whitespace "graph_bg"                  Whitespace ":" Whitespace value:GvizShape Whitespace ";" Whitespace { return {key:"graph_bg", value:value}; }

MinTransitionsPerState
  = Whitespace "min_transitions_per_state" Whitespace ":" Whitespace value:Label     Whitespace ";" Whitespace { return {key:"min_transitions_per_state", value:value}; }

MaxTransitionsPerState
  = Whitespace "max_transitions_per_state" Whitespace ":" Whitespace value:Label     Whitespace ";" Whitespace { return {key:"max_transitions_per_state", value:value}; }

GraphInputs
  = Whitespace "inputs"                    Whitespace ":" Whitespace value:LabelList Whitespace ";" Whitespace { return {key:"inputs", value:value}; }

GraphOutputs
  = Whitespace "outputs"                   Whitespace ":" Whitespace value:LabelList Whitespace ";" Whitespace { return {key:"outputs", value:value}; }

GraphStartNodes
  = Whitespace "start_nodes"               Whitespace ":" Whitespace value:LabelList Whitespace ";" Whitespace { return {key:"start_nodes", value:value}; }

GraphEndNodes
  = Whitespace "end_nodes"                 Whitespace ":" Whitespace value:LabelList Whitespace ";" Whitespace { return {key:"end_nodes", value:value}; }

GraphItem
  = GraphBg
  / MinTransitionsPerState
  / MaxTransitionsPerState
  / GraphStartNodes
  / GraphEndNodes
  / GraphInputs
  / GraphOutputs

GraphItems
  = GraphItem+

ConfigGraph "graph configuration"
  = Whitespace "graph" Whitespace ":" Whitespace "{" Whitespace graph_items:GraphItems? Whitespace "};" Whitespace {
    return { config_kind: "graph", config_items: graph_items || [] };
  }

ConfigGraphLayout
  = Whitespace "graph_layout" Whitespace ":" Whitespace value:GvizLayout Whitespace ";" Whitespace { return {key:"graph_layout", value:value}; }



Config "configuration"
  = ConfigGraph
  / ConfigGraphLayout
  / ConfigTransition
  / ConfigAction
  / ConfigState
  / ConfigValidation



StateColor
  = Whitespace "color" Whitespace ":" Whitespace value:Color Whitespace ";" Whitespace { return { key: "state color", value: value }; }

ArbitraryStateQuality "state quality"
  = Whitespace name:Label Whitespace ":" Whitespace value:Label Whitespace ";" Whitespace { return { key: "state quality", name: name, value: value }; }

StateQuality
  = StateColor
  / ArbitraryStateQuality

StateDef "state definition"
  = Whitespace "state" Whitespace name:Label Whitespace "[" Whitespace sq:StateQuality* Whitespace "]" Whitespace ";" Whitespace { return { key: "State qualities", value: sq }; }



MachineName
  = Whitespace "machine name" Whitespace ":" Whitespace name:Label Whitespace ";" Whitespace { return { key: "Machine name", value: name }; }



StateGroupDef
  = Whitespace "group" Whitespace name:Label Whitespace ":" Whitespace nl:LabelOrLabelList Whitespace ";" Whitespace { return { key: "group definition", value: { name: name, list: nl } }; }



Term
  = Exp
  / StateDef
  / MachineName
  / StateGroupDef
  / Config

TermList
  = term:Term*

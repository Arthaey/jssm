
Expression
  = Whitespace e:ExpList Whitespace { return e; }

ForwardArrow "forward arrow"
  = "->"

TwoWayArrow "two way arrow"
  = "<->"

Arrow
  = ForwardArrow / TwoWayArrow

HexDigit
  = [0-9a-fA-F]

Char
  = Unescaped
  / Escape Sequence:(
        '"'
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "v" { return "\v"; }
      / "u" digits:$(HexDigit HexDigit HexDigit HexDigit) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return Sequence; }

Escape    = "\\"
QuoteMark = '"'
Unescaped = [\x20-\x21\x23-\x5B\x5D-\u10FFFF]

String "string"
  = QuoteMark chars:Char* QuoteMark { return chars.join(""); }

Atom "atom"
  = text:[0-9a-zA-Z\.\+\_\&\(\)\%\$\#\@\!\?\,\']+ { return text.join(''); }

Label "label"
  = atom:Atom
  / string:String

DescValue
  = label:Label

DescItem
  = text:Label ":" value:DescValue ";" { return {text:text, value:value}; }

DescItems
  = DescItem+

ArrowDesc
  = "{" DescItems? "}"

Subexp
  = Whitespace ldesc:ArrowDesc?
    Whitespace arrow:Arrow
    Whitespace rdesc:ArrowDesc?
    Whitespace label:Label
    Whitespace tail:Subexp? {
      return {kind: arrow, ldesc: ldesc, to: label, rdesc: rdesc, se:(tail === [])? undefined: tail};
    }

Exp
  = label:Label se:Subexp Whitespace ';' Whitespace {
    return {from: label, se:(se === [])? undefined: se};
  }

ExpList
  = exp:Exp*

Whitespace "whitespace"
  = [ \t\n\r\v]*

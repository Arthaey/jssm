
Document
  = Whitespace e:TermList Whitespace { return e; }



GvizShape
  = "square"
  / "rectangle"
  / "circle"



ForwardArrow "forward arrow"
  = "->"

TwoWayArrow "two way arrow"
  = "<->"

Arrow
  = ForwardArrow / TwoWayArrow



HexDigit
  = [0-9a-fA-F]

ActionLabelChar
  = ActionLabelUnescaped
  / Escape Sequence:(
        '`'
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "v" { return "\v"; }
      / "u" digits:$(HexDigit HexDigit HexDigit HexDigit) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return Sequence; }

ActionLabelQuoteMark = '`'
ActionLabelUnescaped = [\x20-\x5B\x5D-\x5F\x61-\u10FFFF]

Char
  = Unescaped
  / Escape Sequence:(
        '"'
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "v" { return "\v"; }
      / "u" digits:$(HexDigit HexDigit HexDigit HexDigit) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return Sequence; }

Escape    = "\\"
QuoteMark = '"'
Unescaped = [\x20-\x21\x23-\x5B\x5D-\u10FFFF]

Whitespace "whitespace"
  = [ \t\n\r\v]*



ActionLabel "action label"
  = ActionLabelQuoteMark chars:ActionLabelChar* ActionLabelQuoteMark { return chars.join(""); }

String "string"
  = QuoteMark chars:Char* QuoteMark { return chars.join(""); }

Atom "atom"
  = text:[0-9a-zA-Z\.\+\_\&\(\)\%\$\#\@\!\?\,\']+ { return text.join(''); }

Label "label"
  = atom:Atom
  / string:String



Value
  = label:Label

Item
  = text:Label ":" value:Value ";" { return {text:text, value:value}; }

Items
  = Item+

ArrowDesc
  = "{" items:Items? "}" { return items; }



Subexp
  = Whitespace lactl:ActionLabel?
    Whitespace ldesc:ArrowDesc?
    Whitespace arrow:Arrow
    Whitespace rdesc:ArrowDesc?
    Whitespace ractl:ActionLabel?
    Whitespace label:Label
    Whitespace tail:Subexp? {
      const base = {kind: arrow, to: label};

      if (tail && (tail !== [])) { base.se    = tail; }
      if (ldesc)                 { base.ldesc = ldesc; }
      if (rdesc)                 { base.rdesc = rdesc; }

      return base;
    }

Exp
  = label:Label se:Subexp Whitespace ';' Whitespace {
    const base = {from: label};
    if (se && (se !== [])) { base.se = se; }
    return base;
  }



ValidationKey
  = "whargarbl"
  / "todo"

ValidationItem
  = validationkey:ValidationKey ":" value:Value ";" { return {key:validationkey, value:value}; }

ValidationItems
  = ValidationItem+

ConfigValidation
  = Whitespace "validation" Whitespace ":" Whitespace "{" validation_items:ValidationItems? "};" Whitespace {
    return { config_kind: "validation", config_items: validation_items || [] };
  }



GvizLayout
  = "dot"
  / "circo"

InShape
  = Whitespace "in_shape"     Whitespace ":" Whitespace value:GvizShape  Whitespace ";" Whitespace { return {key:"in_shape",     value:value}; }

OutShape
  = Whitespace "out_shape"    Whitespace ":" Whitespace value:GvizShape  Whitespace ";" Whitespace { return {key:"out_shape",    value:value}; }

NodeShape
  = Whitespace "node_shape"   Whitespace ":" Whitespace value:GvizShape  Whitespace ";" Whitespace { return {key:"node_shape",   value:value}; }

GraphLayout
  = Whitespace "graph_layout" Whitespace ":" Whitespace value:GvizLayout Whitespace ";" Whitespace { return {key:"graph_layout", value:value}; }

StateItem
  = InShape
  / OutShape
  / NodeShape
  / GraphLayout

StateItems
  = StateItem+

ConfigState
  = Whitespace "state" Whitespace ":" Whitespace "{" state_items:StateItems? "};" Whitespace {
    return { config_kind: "state", config_items: state_items || [] };
  }



ActionKey
  = "whargarbl"
  / "todo"

ActionItem
  = actionkey:ActionKey ":" value:Value ";" { return {key:actionkey, value:value}; }

ActionItems
  = ActionItem+

ConfigAction
  = Whitespace "action" Whitespace ":" Whitespace "{" action_items:ActionItems? "};" Whitespace {
    return { config_kind: "action", config_items: action_items || [] };
  }



TransitionKey
  = "whargarbl"
  / "todo"

TransitionItem
  = transitionkey:TransitionKey ":" value:Value ";" { return {key:transitionkey, value:value}; }

TransitionItems
  = TransitionItem+

ConfigTransition
  = Whitespace "transition" Whitespace ":" Whitespace "{" transition_items:TransitionItems? "};" Whitespace {
    return { config_kind: "transition", config_items: transition_items || [] };
  }



GraphBg
  = Whitespace "graph_bg" Whitespace ":" Whitespace value:GvizShape Whitespace ";" Whitespace { return {key:"graph_bg", value:value}; }

MinTransitionsPerState
  = Whitespace "min_transitions_per_state" Whitespace ":" Whitespace value:Label Whitespace ";" Whitespace { return {key:"min_transitions_per_state", value:value}; }

MaxTransitionsPerState
  = Whitespace "max_transitions_per_state" Whitespace ":" Whitespace value:Label Whitespace ";" Whitespace { return {key:"max_transitions_per_state", value:value}; }

GraphItem
  = GraphBg
  / MinTransitionsPerState
  / MaxTransitionsPerState

GraphItems
  = GraphItem+

ConfigGraph
  = Whitespace "graph" Whitespace ":" Whitespace "{" Whitespace graph_items:GraphItems? Whitespace "};" Whitespace {
    return { config_kind: "graph", config_items: graph_items || [] };
  }



Config
  = ConfigGraph
  / ConfigTransition
  / ConfigAction
  / ConfigState
  / ConfigValidation



Term
  = Exp
  / Config

TermList
  = term:Term*

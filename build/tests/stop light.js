'use strict';

var _avaSpec = require('ava-spec');

var jssm = require('../../../build/jssm.es5.js');
/* eslint-disable max-len */

(0, _avaSpec.describe)('Simple stop light', async function (it) {

  var trs = [{ name: 'SwitchToWarn', action: 'Proceed', from: 'Green', to: 'Yellow' }, { name: 'SwitchToHalt', action: 'Proceed', from: 'Yellow', to: 'Red' }, { name: 'SwitchToGo', action: 'Proceed', from: 'Red', to: 'Green' }],
      light = new jssm.Machine({
    initial_state: 'Red',
    transitions: trs
  });

  var r_states = light.states();
  it('has the right state count', function (t) {
    return t.is(r_states.length, 3);
  });
  trs.map(function (t) {
    return t.to;
  }).map(function (c) {
    return it('has state "' + c + '"', function (t) {
      return t.is(r_states.includes(c), true);
    });
  });

  var r_names = light.list_named_transitions();
  it('has the right named transition count', function (t) {
    return t.is(r_names.size, 3);
  });
  trs.map(function (t) {
    return t.name;
  }).map(function (a) {
    return it('has named transition "' + a + '"', function (t) {
      return t.is(r_names.has(a), true);
    });
  });

  it.describe('- `proceed` walkthrough', async function (it2) {

    it2('machine starts red', function (t) {
      return t.is("Red", light.state());
    });
    it2('proceed is true', function (t) {
      return t.is(true, light.action('Proceed'));
    });
    it2('light is now green', function (t) {
      return t.is("Green", light.state());
    });
    it2('proceed is true', function (t) {
      return t.is(true, light.action('Proceed'));
    });
    it2('light is now yellow', function (t) {
      return t.is("Yellow", light.state());
    });
    it2('proceed is true', function (t) {
      return t.is(true, light.action('Proceed'));
    });
    it2('light is red again', function (t) {
      return t.is("Red", light.state());
    });
  });

  it.describe('- mixed - `proceed` and `transition`', async function (it3) {

    it3('machine starts red', function (t) {
      return t.is("Red", light.state());
    });
    it3('proceed is true', function (t) {
      return t.is(true, light.action('Proceed'));
    });
    it3('light is now green', function (t) {
      return t.is("Green", light.state());
    });

    it3('green refuses transition red', function (t) {
      return t.is(false, light.transition('Red'));
    });
    it3('green still green', function (t) {
      return t.is("Green", light.state());
    });
    it3('green refuses transition green', function (t) {
      return t.is(false, light.transition('Green'));
    });
    it3('green still green', function (t) {
      return t.is("Green", light.state());
    });
    it3('green accepts transition yellow', function (t) {
      return t.is(true, light.transition('Yellow'));
    });
    it3('green now yellow', function (t) {
      return t.is("Yellow", light.state());
    });

    it3('proceed is true', function (t) {
      return t.is(true, light.action('Proceed'));
    });
    it3('light is red again', function (t) {
      return t.is("Red", light.state());
    });

    it3('red refuses transition yellow', function (t) {
      return t.is(false, light.transition('Yellow'));
    });
    it3('red still red', function (t) {
      return t.is("Red", light.state());
    });
    it3('red refuses transition red', function (t) {
      return t.is(false, light.transition('Red'));
    });
    it3('red still red', function (t) {
      return t.is("Red", light.state());
    });
    it3('red accepts transition green', function (t) {
      return t.is(true, light.transition('Green'));
    });
    it3('red now green', function (t) {
      return t.is("Green", light.state());
    });

    it3('proceed is true', function (t) {
      return t.is(true, light.action('Proceed'));
    });
    it3('light is yellow again', function (t) {
      return t.is("Yellow", light.state());
    });
    it3('proceed is true', function (t) {
      return t.is(true, light.action('Proceed'));
    });
    it3('light is finally red again', function (t) {
      return t.is("Red", light.state());
    });
  });
});

(0, _avaSpec.describe)('Complex stop light', async function (it) {

  var light2 = new jssm.Machine({

    initial_state: 'off',

    transitions: [{ name: 'turn_on', action: 'power_on', from: 'off', to: 'red' }, { action: 'power_off', from: 'red', to: 'off' }, { action: 'power_off', from: 'yellow', to: 'off' }, { action: 'power_off', from: 'green', to: 'off' }, { name: 'switch_warn', action: 'proceed', from: 'green', to: 'yellow' }, { name: 'switch_halt', action: 'proceed', from: 'yellow', to: 'red' }, { name: 'switch_go', action: 'proceed', from: 'red', to: 'green' }]

  });

  var r_states = light2.states();
  it('has the right state count', function (t) {
    return t.is(r_states.length, 4);
  });
  ['red', 'yellow', 'green', 'off'].map(function (c) {
    return it('has state "' + c + '"', function (t) {
      return t.is(r_states.includes(c), true);
    });
  });

  var r_names = light2.list_named_transitions();
  it('has the right named transition count', function (t) {
    return t.is(r_names.size, 4);
  });
  ['turn_on', 'switch_warn', 'switch_halt', 'switch_go'].map(function (a) {
    return it('has named transition "' + a + '"', function (t) {
      return t.is(r_names.has(a), true);
    });
  });

  it('has the right exit actions for red', function (t) {
    return t.deepEqual(['power_off', 'proceed'], light2.list_exit_actions('red'));
  });

  it.describe('- `transition` walkthrough', async function (it2) {

    it2('machine starts off', function (t) {
      return t.is("off", light2.state());
    });
    it2('off refuses green', function (t) {
      return t.is(false, light2.transition('green'));
    });
    it2('off refuses yellow', function (t) {
      return t.is(false, light2.transition('yellow'));
    });

    it2('off refuses proceed', function (t) {
      return t.is(false, light2.action('proceed'));
    });

    it2('off accepts red', function (t) {
      return t.is(true, light2.transition('red'));
    });
    it2('off is now red', function (t) {
      return t.is("red", light2.state());
    });
    it2('red refuses yellow', function (t) {
      return t.is(false, light2.transition('yellow'));
    });
    it2('red still red', function (t) {
      return t.is("red", light2.state());
    });
    it2('red refuses red', function (t) {
      return t.is(false, light2.transition('red'));
    });
    it2('red still red', function (t) {
      return t.is("red", light2.state());
    });

    it2('red accepts green', function (t) {
      return t.is(true, light2.transition('green'));
    });
    it2('red now green', function (t) {
      return t.is("green", light2.state());
    });
    it2('green refuses red', function (t) {
      return t.is(false, light2.transition('red'));
    });
    it2('green still green', function (t) {
      return t.is("green", light2.state());
    });
    it2('green refuses green', function (t) {
      return t.is(false, light2.transition('green'));
    });
    it2('green still green', function (t) {
      return t.is("green", light2.state());
    });

    it2('green accepts yellow', function (t) {
      return t.is(true, light2.transition('yellow'));
    });
    it2('green now yellow', function (t) {
      return t.is("yellow", light2.state());
    });
    it2('yellow refuses green', function (t) {
      return t.is(false, light2.transition('green'));
    });
    it2('yellow still yellow', function (t) {
      return t.is("yellow", light2.state());
    });
    it2('yellow refuses yellow', function (t) {
      return t.is(false, light2.transition('yellow'));
    });
    it2('yellow still yellow', function (t) {
      return t.is("yellow", light2.state());
    });

    it2('yellow accepts red', function (t) {
      return t.is(true, light2.transition('red'));
    });
    it2('back to red', function (t) {
      return t.is("red", light2.state());
    });

    it2('proceed is true', function (t) {
      return t.is(true, light2.action('proceed'));
    });
    it2('light is now green', function (t) {
      return t.is("green", light2.state());
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
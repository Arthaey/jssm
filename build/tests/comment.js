'use strict';

var _avaSpec = require('ava-spec');

var jssm = require('../../../build/jssm.es5.js');
/* eslint-disable max-len */

(0, _avaSpec.describe)('block strategies', async function (_it) {

  var AtoB = [{ "key": "transition", "from": "a", "se": { "kind": "->", "to": "b" } }],
      is_AB = function is_AB(str, it) {
    return it(_avaSpec.test, function (t) {
      return t.deepEqual(AtoB, jssm.parse(str));
    });
  },
      ABCD = [{ "key": "transition", "from": "a", "se": { "kind": "->", "to": "b" } }, { "key": "transition", "from": "c", "se": { "kind": "->", "to": "d" } }],
      is_ABCD = function is_ABCD(str, it) {
    return it(_avaSpec.test, function (t) {
      return t.deepEqual(ABCD, jssm.parse(str));
    });
  };

  (0, _avaSpec.describe)('empty block comments in left middle', async function (it) {
    is_AB('a/**/->b;', it);
    is_AB('a /**/->b;', it);
    is_AB('a/**/ ->b;', it);
    is_AB('a /**/ ->b;', it);
    is_AB('a\n/**/->b;', it);
    is_AB('a/**/\n->b;', it);
    is_AB('a\n/**/\n->b;', it);
  });

  (0, _avaSpec.describe)('empty block comments in right middle', async function (it) {
    is_AB('a->/**/b;', it);
    is_AB('a-> /**/b;', it);
    is_AB('a->/**/ b;', it);
    is_AB('a-> /**/ b;', it);
    is_AB('a->\n/**/b;', it);
    is_AB('a->/**/\nb;', it);
    is_AB('a->\n/**/\nb;', it);
  });

  (0, _avaSpec.describe)('non-empty block comments in left middle', async function (it) {
    is_AB('a/* hello */->b;', it);
    is_AB('a /* hello */->b;', it);
    is_AB('a/* hello */ ->b;', it);
    is_AB('a /* hello */ ->b;', it);
    is_AB('a\n/* hello */ ->b;', it);
    is_AB('a/* hello */\n->b;', it);
    is_AB('a\n/* hello */\n->b;', it);
  });

  (0, _avaSpec.describe)('empty block comments before', async function (it) {
    is_AB('/**/a->b;', it);
    is_AB('/**/ a->b;', it);
  });

  (0, _avaSpec.describe)('empty block comments inbetween', async function (it) {
    is_ABCD('a->b;/**/c->d;', it);
    is_ABCD('a->b; /**/c->d;', it);
    is_ABCD('a->b;/**/ c->d;', it);
    is_ABCD('a->b; /**/ c->d;', it);
  });

  (0, _avaSpec.describe)('empty block comments after / at end', async function (it) {
    is_AB('a->b;/**/', it);
    is_AB('a->b; /**/', it);
  });

  (0, _avaSpec.describe)('block commented code', async function (it) {
    is_AB('a->b;/* c->d; */', it);
    is_AB('a->b;\n/*c -> d;*/\n', it);
    is_ABCD('a->b;/* e->f; */c->d;', it);
    is_ABCD('a->b;\n/*e -> f;*/\nc->d;', it);
    is_ABCD('a->b;\n/*e -> f;*/\nc->d;\n', it);
  });
});

(0, _avaSpec.describe)('line strategies', async function (_it) {

  var AtoB = [{ "key": "transition", "from": "a", "se": { "kind": "->", "to": "b" } }],
      is_AB = function is_AB(it, str) {
    return it(_avaSpec.test, function (t) {
      return t.deepEqual(AtoB, jssm.parse(str));
    });
  },
      ABCD = [{ "key": "transition", "from": "a", "se": { "kind": "->", "to": "b" } }, { "key": "transition", "from": "c", "se": { "kind": "->", "to": "d" } }],
      is_ABCD = function is_ABCD(it, str) {
    return it(_avaSpec.test, function (t) {
      return t.deepEqual(ABCD, jssm.parse(str));
    });
  };

  (0, _avaSpec.describe)('empty line comments at end', async function (it) {
    is_AB(it, 'a->b;//');
    is_AB(it, 'a->b; //');
    is_AB(it, 'a->b;//\n');
    is_AB(it, 'a->b; //\n');
  });

  (0, _avaSpec.describe)('non-empty line comments at end', async function (it) {
    is_AB(it, 'a->b;// hello');
    is_AB(it, 'a->b; // hello');
    is_AB(it, 'a->b;// hello\n');
    is_AB(it, 'a->b; // hello\n');
  });

  (0, _avaSpec.describe)('empty line comments at beginning', async function (it) {
    is_AB(it, '//\na->b;');
  });

  (0, _avaSpec.describe)('non-empty line comments at beginning', async function (it) {
    is_AB(it, '// hello\na->b;');
  });

  (0, _avaSpec.describe)('empty line comments inbetween', async function (it) {
    is_ABCD(it, 'a->b;//\nc->d;');
  });

  (0, _avaSpec.describe)('non-empty line comments inbetween', async function (it) {
    is_ABCD(it, 'a->b;// hello\nc->d;');
  });

  (0, _avaSpec.describe)('line commented code', async function (it) {
    is_AB(it, 'a->b;// c->d;');
    is_AB(it, 'a->b;\n//c -> d;\n');
    is_ABCD(it, 'a->b;// e->f;\nc->d;');
    is_ABCD(it, 'a->b;\n//e -> f;\nc->d;');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qcy90ZXN0cy9jb21tZW50LmpzIl0sIm5hbWVzIjpbImpzc20iLCJyZXF1aXJlIiwiX2l0IiwiQXRvQiIsImlzX0FCIiwic3RyIiwiaXQiLCJ0IiwiZGVlcEVxdWFsIiwicGFyc2UiLCJBQkNEIiwiaXNfQUJDRCJdLCJtYXBwaW5ncyI6Ijs7QUFHQTs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLDRCQUFSLENBQWI7QUFKQTs7QUFVQSx1QkFBUyxrQkFBVCxFQUE2QixnQkFBTUMsR0FBTixFQUFhOztBQUV4QyxNQUFNQyxPQUFVLENBQUMsRUFBQyxPQUFPLFlBQVIsRUFBc0IsUUFBUSxHQUE5QixFQUFtQyxNQUFNLEVBQUMsUUFBUSxJQUFULEVBQWMsTUFBTSxHQUFwQixFQUF6QyxFQUFELENBQWhCO0FBQUEsTUFDTUMsUUFBVSxTQUFWQSxLQUFVLENBQUNDLEdBQUQsRUFBTUMsRUFBTjtBQUFBLFdBQWFBLGtCQUFTO0FBQUEsYUFBS0MsRUFBRUMsU0FBRixDQUFZTCxJQUFaLEVBQWtCSCxLQUFLUyxLQUFMLENBQVdKLEdBQVgsQ0FBbEIsQ0FBTDtBQUFBLEtBQVQsQ0FBYjtBQUFBLEdBRGhCO0FBQUEsTUFHTUssT0FBVSxDQUFDLEVBQUMsT0FBTyxZQUFSLEVBQXNCLFFBQVEsR0FBOUIsRUFBbUMsTUFBTSxFQUFDLFFBQVEsSUFBVCxFQUFjLE1BQU0sR0FBcEIsRUFBekMsRUFBRCxFQUNDLEVBQUMsT0FBTyxZQUFSLEVBQXNCLFFBQVEsR0FBOUIsRUFBbUMsTUFBTSxFQUFDLFFBQVEsSUFBVCxFQUFjLE1BQU0sR0FBcEIsRUFBekMsRUFERCxDQUhoQjtBQUFBLE1BTU1DLFVBQVUsU0FBVkEsT0FBVSxDQUFDTixHQUFELEVBQU1DLEVBQU47QUFBQSxXQUFhQSxrQkFBUztBQUFBLGFBQUtDLEVBQUVDLFNBQUYsQ0FBWUUsSUFBWixFQUFrQlYsS0FBS1MsS0FBTCxDQUFXSixHQUFYLENBQWxCLENBQUw7QUFBQSxLQUFULENBQWI7QUFBQSxHQU5o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QUNELEdBRkQ7O0FBSUEseUJBQVMscUJBQVQsRUFBZ0MsZ0JBQU1BLEVBQU4sRUFBWTtBQUMxQ0YsVUFBTUUsRUFBTixFQUFZLGVBQVo7QUFDQUYsVUFBTUUsRUFBTixFQUFZLG9CQUFaO0FBQ0FLLFlBQVFMLEVBQVIsRUFBWSxzQkFBWjtBQUNBSyxZQUFRTCxFQUFSLEVBQVkseUJBQVo7QUFDRCxHQUxEO0FBT0QsQ0EvQ0QiLCJmaWxlIjoiY29tbWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5pbXBvcnQge3Rlc3QsIGRlc2NyaWJlfSBmcm9tICdhdmEtc3BlYyc7XG5cbmNvbnN0IGpzc20gPSByZXF1aXJlKCcuLi8uLi8uLi9idWlsZC9qc3NtLmVzNS5qcycpO1xuXG5cblxuXG5cbmRlc2NyaWJlKCdibG9jayBzdHJhdGVnaWVzJywgYXN5bmMgX2l0ID0+IHtcblxuICBjb25zdCBBdG9CICAgID0gW3tcImtleVwiOiBcInRyYW5zaXRpb25cIiwgXCJmcm9tXCI6IFwiYVwiLCBcInNlXCI6IHtcImtpbmRcIjogXCItPlwiLFwidG9cIjogXCJiXCJ9fV0sXG4gICAgICAgIGlzX0FCICAgPSAoc3RyLCBpdCkgPT4gaXQodGVzdCwgdCA9PiB0LmRlZXBFcXVhbChBdG9CLCBqc3NtLnBhcnNlKHN0cikpKSxcblxuICAgICAgICBBQkNEICAgID0gW3tcImtleVwiOiBcInRyYW5zaXRpb25cIiwgXCJmcm9tXCI6IFwiYVwiLCBcInNlXCI6IHtcImtpbmRcIjogXCItPlwiLFwidG9cIjogXCJiXCJ9fSxcbiAgICAgICAgICAgICAgICAgICB7XCJrZXlcIjogXCJ0cmFuc2l0aW9uXCIsIFwiZnJvbVwiOiBcImNcIiwgXCJzZVwiOiB7XCJraW5kXCI6IFwiLT5cIixcInRvXCI6IFwiZFwifX1dLFxuXG4gICAgICAgIGlzX0FCQ0QgPSAoc3RyLCBpdCkgPT4gaXQodGVzdCwgdCA9PiB0LmRlZXBFcXVhbChBQkNELCBqc3NtLnBhcnNlKHN0cikpKTtcblxuICBkZXNjcmliZSgnZW1wdHkgYmxvY2sgY29tbWVudHMgaW4gbGVmdCBtaWRkbGUnLCBhc3luYyBpdCA9PiB7XG4gICAgaXNfQUIoJ2EvKiovLT5iOycsICAgICBpdCk7XG4gICAgaXNfQUIoJ2EgLyoqLy0+YjsnLCAgICBpdCk7XG4gICAgaXNfQUIoJ2EvKiovIC0+YjsnLCAgICBpdCk7XG4gICAgaXNfQUIoJ2EgLyoqLyAtPmI7JywgICBpdCk7XG4gICAgaXNfQUIoJ2FcXG4vKiovLT5iOycsICAgaXQpO1xuICAgIGlzX0FCKCdhLyoqL1xcbi0+YjsnLCAgIGl0KTtcbiAgICBpc19BQignYVxcbi8qKi9cXG4tPmI7JywgaXQpO1xuICB9KTtcblxuICBkZXNjcmliZSgnZW1wdHkgYmxvY2sgY29tbWVudHMgaW4gcmlnaHQgbWlkZGxlJywgYXN5bmMgaXQgPT4ge1xuICAgIGlzX0FCKCdhLT4vKiovYjsnLCAgICAgaXQpO1xuICAgIGlzX0FCKCdhLT4gLyoqL2I7JywgICAgaXQpO1xuICAgIGlzX0FCKCdhLT4vKiovIGI7JywgICAgaXQpO1xuICAgIGlzX0FCKCdhLT4gLyoqLyBiOycsICAgaXQpO1xuICAgIGlzX0FCKCdhLT5cXG4vKiovYjsnLCAgIGl0KTtcbiAgICBpc19BQignYS0+LyoqL1xcbmI7JywgICBpdCk7XG4gICAgaXNfQUIoJ2EtPlxcbi8qKi9cXG5iOycsIGl0KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ25vbi1lbXB0eSBibG9jayBjb21tZW50cyBpbiBsZWZ0IG1pZGRsZScsIGFzeW5jIGl0ID0+IHtcbiAgICBpc19BQignYS8qIGhlbGxvICovLT5iOycsICAgICBpdCk7XG4gICAgaXNfQUIoJ2EgLyogaGVsbG8gKi8tPmI7JywgICAgaXQpO1xuICAgIGlzX0FCKCdhLyogaGVsbG8gKi8gLT5iOycsICAgIGl0KTtcbiAgICBpc19BQignYSAvKiBoZWxsbyAqLyAtPmI7JywgICBpdCk7XG4gICAgaXNfQUIoJ2FcXG4vKiBoZWxsbyAqLyAtPmI7JywgIGl0KTtcbiAgICBpc19BQignYS8qIGhlbGxvICovXFxuLT5iOycsICAgaXQpO1xuICAgIGlzX0FCKCdhXFxuLyogaGVsbG8gKi9cXG4tPmI7JywgaXQpO1xuICB9KTtcblxuICBkZXNjcmliZSgnZW1wdHkgYmxvY2sgY29tbWVudHMgYmVmb3JlJywgYXN5bmMgaXQgPT4ge1xuICAgIGlzX0FCKCcvKiovYS0+YjsnLCAgaXQpO1xuICAgIGlzX0FCKCcvKiovIGEtPmI7JywgaXQpO1xuICB9KTtcblxuICBkZXNjcmliZSgnZW1wdHkgYmxvY2sgY29tbWVudHMgaW5iZXR3ZWVuJywgYXN5bmMgaXQgPT4ge1xuICAgIGlzX0FCQ0QoJ2EtPmI7LyoqL2MtPmQ7JywgICBpdCk7XG4gICAgaXNfQUJDRCgnYS0+YjsgLyoqL2MtPmQ7JywgIGl0KTtcbiAgICBpc19BQkNEKCdhLT5iOy8qKi8gYy0+ZDsnLCAgaXQpO1xuICAgIGlzX0FCQ0QoJ2EtPmI7IC8qKi8gYy0+ZDsnLCBpdCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdlbXB0eSBibG9jayBjb21tZW50cyBhZnRlciAvIGF0IGVuZCcsIGFzeW5jIGl0ID0+IHtcbiAgICBpc19BQignYS0+YjsvKiovJywgIGl0KTtcbiAgICBpc19BQignYS0+YjsgLyoqLycsIGl0KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2Jsb2NrIGNvbW1lbnRlZCBjb2RlJywgYXN5bmMgaXQgPT4ge1xuICAgIGlzX0FCKCdhLT5iOy8qIGMtPmQ7ICovJywgICAgICAgICAgICAgIGl0KTtcbiAgICBpc19BQignYS0+YjtcXG4vKmMgLT4gZDsqL1xcbicsICAgICAgICAgIGl0KTtcbiAgICBpc19BQkNEKCdhLT5iOy8qIGUtPmY7ICovYy0+ZDsnLCAgICAgICBpdCk7XG4gICAgaXNfQUJDRCgnYS0+YjtcXG4vKmUgLT4gZjsqL1xcbmMtPmQ7JywgICBpdCk7XG4gICAgaXNfQUJDRCgnYS0+YjtcXG4vKmUgLT4gZjsqL1xcbmMtPmQ7XFxuJywgaXQpO1xuICB9KTtcblxufSk7XG5cblxuXG5cblxuZGVzY3JpYmUoJ2xpbmUgc3RyYXRlZ2llcycsIGFzeW5jIF9pdCA9PiB7XG5cbiAgY29uc3QgQXRvQiAgICA9IFt7XCJrZXlcIjogXCJ0cmFuc2l0aW9uXCIsIFwiZnJvbVwiOiBcImFcIiwgXCJzZVwiOiB7XCJraW5kXCI6IFwiLT5cIixcInRvXCI6IFwiYlwifX1dLFxuICAgICAgICBpc19BQiAgID0gKGl0LCBzdHIpID0+IGl0KHRlc3QsIHQgPT4gdC5kZWVwRXF1YWwoQXRvQiwganNzbS5wYXJzZShzdHIpKSksXG5cbiAgICAgICAgQUJDRCAgICA9IFt7XCJrZXlcIjogXCJ0cmFuc2l0aW9uXCIsIFwiZnJvbVwiOiBcImFcIiwgXCJzZVwiOiB7XCJraW5kXCI6IFwiLT5cIixcInRvXCI6IFwiYlwifX0sXG4gICAgICAgICAgICAgICAgICAge1wia2V5XCI6IFwidHJhbnNpdGlvblwiLCBcImZyb21cIjogXCJjXCIsIFwic2VcIjoge1wia2luZFwiOiBcIi0+XCIsXCJ0b1wiOiBcImRcIn19XSxcblxuICAgICAgICBpc19BQkNEID0gKGl0LCBzdHIpID0+IGl0KHRlc3QsIHQgPT4gdC5kZWVwRXF1YWwoQUJDRCwganNzbS5wYXJzZShzdHIpKSk7XG5cbiAgZGVzY3JpYmUoJ2VtcHR5IGxpbmUgY29tbWVudHMgYXQgZW5kJywgYXN5bmMgaXQgPT4ge1xuICAgIGlzX0FCKGl0LCAnYS0+YjsvLycpO1xuICAgIGlzX0FCKGl0LCAnYS0+YjsgLy8nKTtcbiAgICBpc19BQihpdCwgJ2EtPmI7Ly9cXG4nKTtcbiAgICBpc19BQihpdCwgJ2EtPmI7IC8vXFxuJyk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdub24tZW1wdHkgbGluZSBjb21tZW50cyBhdCBlbmQnLCBhc3luYyBpdCA9PiB7XG4gICAgaXNfQUIoaXQsICdhLT5iOy8vIGhlbGxvJyk7XG4gICAgaXNfQUIoaXQsICdhLT5iOyAvLyBoZWxsbycpO1xuICAgIGlzX0FCKGl0LCAnYS0+YjsvLyBoZWxsb1xcbicpO1xuICAgIGlzX0FCKGl0LCAnYS0+YjsgLy8gaGVsbG9cXG4nKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2VtcHR5IGxpbmUgY29tbWVudHMgYXQgYmVnaW5uaW5nJywgYXN5bmMgaXQgPT4ge1xuICAgIGlzX0FCKGl0LCAnLy9cXG5hLT5iOycpO1xuICB9KTtcblxuICBkZXNjcmliZSgnbm9uLWVtcHR5IGxpbmUgY29tbWVudHMgYXQgYmVnaW5uaW5nJywgYXN5bmMgaXQgPT4ge1xuICAgIGlzX0FCKGl0LCAnLy8gaGVsbG9cXG5hLT5iOycpO1xuICB9KTtcblxuICBkZXNjcmliZSgnZW1wdHkgbGluZSBjb21tZW50cyBpbmJldHdlZW4nLCBhc3luYyBpdCA9PiB7XG4gICAgaXNfQUJDRChpdCwgJ2EtPmI7Ly9cXG5jLT5kOycpO1xuICB9KTtcblxuICBkZXNjcmliZSgnbm9uLWVtcHR5IGxpbmUgY29tbWVudHMgaW5iZXR3ZWVuJywgYXN5bmMgaXQgPT4ge1xuICAgIGlzX0FCQ0QoaXQsICdhLT5iOy8vIGhlbGxvXFxuYy0+ZDsnKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2xpbmUgY29tbWVudGVkIGNvZGUnLCBhc3luYyBpdCA9PiB7XG4gICAgaXNfQUIoaXQsICAgJ2EtPmI7Ly8gYy0+ZDsnKTtcbiAgICBpc19BQihpdCwgICAnYS0+YjtcXG4vL2MgLT4gZDtcXG4nKTtcbiAgICBpc19BQkNEKGl0LCAnYS0+YjsvLyBlLT5mO1xcbmMtPmQ7Jyk7XG4gICAgaXNfQUJDRChpdCwgJ2EtPmI7XFxuLy9lIC0+IGY7XFxuYy0+ZDsnKTtcbiAgfSk7XG5cbn0pO1xuIl19
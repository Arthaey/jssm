'use strict';

var _avaSpec = require('ava-spec');

var jssm = require('../../../build/jssm.es5.js');
/* eslint-disable max-len */

(0, _avaSpec.describe)('parse/1', async function (_parse_it) {

  (0, _avaSpec.describe)('forward arrow', async function (it) {

    var AtoB = [{ "key": "transition", "from": "a", "se": { "kind": "->", "to": "b" } }],
        AdB = [{ "key": "transition", "from": "a", "se": { "kind": "->", "to": "b", "l_desc": [{ "key": "arc_label", "value": "d" }] } }],
        ABd = [{ "key": "transition", "from": "a", "se": { "kind": "->", "to": "b", "r_desc": [{ "key": "arc_label", "value": "d" }] } }],
        AdBd = [{ "key": "transition", "from": "a", "se": { "kind": "->", "to": "b", "l_desc": [{ "key": "arc_label", "value": "d" }], "r_desc": [{ "key": "arc_label", "value": "f" }] } }];

    var echo_equal = function echo_equal(testt, validator) {
      return it(_avaSpec.test, function (t) {
        return t.deepEqual(validator, jssm.parse(testt));
      });
    };

    var ShouldEqualAtoB = ['a->b;', 'a ->b;', 'a-> b;', 'a -> b;', 'a{}->b;', 'a->{}b;', 'a{}->{}b;'];
    ShouldEqualAtoB.map(function (p) {
      return echo_equal(p, AtoB);
    });

    echo_equal('a{arc_label:d;}->b;', AdB);
    echo_equal('a{arc_label:"d";}->b;', AdB);
    echo_equal('a->{arc_label:d;}b;', ABd);
    echo_equal('a{arc_label:d;}->{arc_label:f;}b;', AdBd);
  });

  (0, _avaSpec.describe)('double arrow', async function (it) {

    var AtoB = [{ "key": "transition", "from": "a", "se": { "kind": "<->", "to": "b" } }],
        AdB = [{ "key": "transition", "from": "a", "se": { "kind": "<->", "to": "b", "l_desc": [{ "key": "arc_label", "value": "d" }] } }],
        ABd = [{ "key": "transition", "from": "a", "se": { "kind": "<->", "to": "b", "r_desc": [{ "key": "arc_label", "value": "d" }] } }],
        AdBd = [{ "key": "transition", "from": "a", "se": { "kind": "<->", "to": "b", "l_desc": [{ "key": "arc_label", "value": "d" }], "r_desc": [{ "key": "arc_label", "value": "f" }] } }];

    var echo_equal = function echo_equal(testt, validator) {
      return it(_avaSpec.test, function (t) {
        return t.deepEqual(validator, jssm.parse(testt));
      });
    };

    var ShouldEqualAtoB = ['a<->b;', 'a <->b;', 'a<-> b;', 'a <-> b;', 'a{}<->b;', 'a<->{}b;', 'a{}<->{}b;'];
    ShouldEqualAtoB.map(function (p) {
      return echo_equal(p, AtoB);
    });

    echo_equal('a{arc_label:d;}<->b;', AdB);
    echo_equal('a{arc_label:"d";}<->b;', AdB);
    echo_equal('a<->{arc_label:d;}b;', ABd);
    echo_equal('a{arc_label:d;}<->{arc_label:f;}b;', AdBd);
  });

  (0, _avaSpec.describe)('chain', async function (it) {
    var AtoBtoC = [{ "key": "transition", "from": "a", "se": { "kind": "->", "to": "b", "se": { "kind": "->", "to": "c" } } }];
    it('a->b->c;', function (t) {
      return t.deepEqual(AtoBtoC, jssm.parse('a->b->c;'));
    });
  });

  (0, _avaSpec.describe)('sequence', async function (it) {
    var AtoB_CtoD = [{ "key": "transition", "from": "a", "se": { "kind": "->", "to": "b" } }, { "key": "transition", "from": "c", "se": { "kind": "->", "to": "d" } }];
    it('a->b;c->d;', function (t) {
      return t.deepEqual(AtoB_CtoD, jssm.parse('a->b;c->d;'));
    });
  });

  // todo: graph: {inputs: [foo]}
  // todo: graph: {outputs: [foo]}

  (0, _avaSpec.describe)('torture', async function (it) {

    var augh = '\n      a->b-> c-> d -> e\n->\nf <- g <= h <-> i <=> j ~> k <~ l <~> m <~-> n <-~> o <=~> p <~=> q <-=> r <=-> s \'A\' <= \'B\' t;';

    it('doesn\'t throw', function (t) {
      return t.notThrows(function () {
        jssm.parse(augh);
      });
    });
  });
});

// stochable
//# sourceMappingURL=data:application/json;charset=utf-8;base64,